# SSD with Mobilenet v2 configuration for MSCOCO Dataset.
# Users should configure the fine_tune_checkpoint field in the train config as
# well as the label_map_path and input_path fields in the train_input_reader and
# eval_input_reader. Search for "PATH_TO_BE_CONFIGURED" to find the fields that
# should be configured.

# DATA:
# PCI_head_data_DAv1-3: Head
# PCI_head_data_DAv4: Head, Hat on Head, Hat on Others (In use)
# PCI_head_data_DAv4_1: Head, Hat
model {
  ssd {
    num_classes: 3
    box_coder {
      faster_rcnn_box_coder {
        y_scale: 10.0
        x_scale: 10.0
        height_scale: 5.0
        width_scale: 5.0
      }
    }
    # 用于先验框和gt框的匹配，tensorflow里只用了第二个匹配原则，即大于matched_threshold的都认为是正样本（第一原则是匹配IOU最大的先验框），相反，则认为是负样本
    matcher {
      argmax_matcher {
        matched_threshold: 0.5
        unmatched_threshold: 0.5
        ignore_thresholds: false
        negatives_lower_than_unmatched: true
        force_match_for_each_row: true
      }
    }
    similarity_calculator {
      iou_similarity {
      }
    }
    # 一个先验框由尺度和长宽比决定，先验框尺度（随特征图数量呈线性增长）及长宽比,根据公式，尺度自带0.1，即30
    # 目前数据的gt框分布：h在0-0.4，w在0-0.25；长宽比分布：1和2附近有峰值
    anchor_generator {
      ssd_anchor_generator {
        num_layers: 6
        min_scale: 0.1
        max_scale: 0.8
        aspect_ratios: 1.0
        aspect_ratios: 2.0
        aspect_ratios: 0.5
        aspect_ratios: 3.0
        aspect_ratios: 0.3333
      }
    }
    image_resizer {
      fixed_shape_resizer {
        height: 300
        width: 300
      }
    }
    box_predictor {
      convolutional_box_predictor {
        min_depth: 0
        max_depth: 0
        num_layers_before_predictor: 0
        use_dropout: false
        dropout_keep_probability: 0.8
        kernel_size: 1
        box_code_size: 4
        apply_sigmoid_to_scores: false
        conv_hyperparams {
          activation: RELU_6,
          regularizer {
            l2_regularizer {
              weight: 0.00004
            }
          }
          initializer {
            truncated_normal_initializer {
              stddev: 0.03
              mean: 0.0
            }
          }
          batch_norm {
            train: true,
            scale: true,
            center: true,
            decay: 0.9997,
            epsilon: 0.001,
          }
        }
      }
    }
    feature_extractor {
      type: 'ssd_mobilenet_v2'
      min_depth: 16
      depth_multiplier: 1.0
      conv_hyperparams {
        activation: RELU_6,
        regularizer {
          l2_regularizer {
            weight: 0.00004
          }
        }
        initializer {
          truncated_normal_initializer {
            stddev: 0.03
            mean: 0.0
          }
        }
        batch_norm {
          train: true,
          scale: true,
          center: true,
          decay: 0.9997,
          epsilon: 0.001,
        }
      }
    }
    loss {
      classification_loss {
        weighted_sigmoid_focal {
          alpha: 0.75,
          gamma: 2.0
        }
      }
      localization_loss {
        weighted_smooth_l1 {
        }
      }
      # 注：如果上面用的是weighted_sigmoid_focal,下面就不能hard_example_miner
      # 以防在先验框和gt框匹配后造成的正负样本不平衡，采用hard example miner的方式在负样本中抽样，抽样时按照置信度误差（预测背景的置信度越小，误差越大）进行降序排列，
      # 选取误差的较大的top-k作为训练的负样本，以保证正负样本比例接近1:3
      # For each image, selects the regions with highest losses subject to the condition that a newly selected region cannot have an IOU > iou_threshold with 
      # any of the previously selected regions. 选的每一个框不能和前一个选的框的IOU大于iou_threshold
      #hard_example_miner {
      #  num_hard_examples: 3000    # per image
      #  iou_threshold: 0.99
      #  loss_type: CLASSIFICATION
      #  max_negatives_per_positive: 3
      #  min_negatives_per_image: 3
      #}
      classification_weight: 1.0
      localization_weight: 1.0
    }
    normalize_loss_by_num_matches: true
    post_processing {
      batch_non_max_suppression {
        score_threshold: 1e-8   # the model will remove any prediction results with confidence score lower than the threshold.
        iou_threshold: 0.5      # The box with IoU higher than 0.5 will be removed
        max_detections_per_class: 100
        max_total_detections: 100
      }
      score_converter: SIGMOID
    }
  }
}

train_config: {
  batch_size: 32   # Increase/Decrease this value depending on the available memory (Higher values require more memory and vice-versa)
  # More detail in models/research/object_detection/builders/optimizer_builder.py
  
  optimizer {
    # Adam, cosine decay, warmup
    adam_optimizer: {
      learning_rate: {
       cosine_decay_learning_rate {
          learning_rate_base: 0.005
          total_steps: 300000  # same as num_step below
          warmup_learning_rate: 0.001
          warmup_steps: 1000
        }
      }
    }
  }
  fine_tune_checkpoint: "/roy_work/Object_detection_API/pre_trained_model/ssd_mobilenet_v2_coco/model.ckpt"
  fine_tune_checkpoint_type:  "detection"
  # Note: The below line limits the training process to 200K steps, which we
  # empirically found to be sufficient enough to train the pets dataset. This
  # effectively bypasses the learning rate schedule (the learning rate will
  # never decay). Remove the below line to train indefinitely.
  num_steps: 300000   # same as num_step above
  data_augmentation_options {
    random_horizontal_flip {
    }
  }
  data_augmentation_options {
    ssd_random_crop {
    }
  }
}

train_input_reader: {
  tf_record_input_reader {
    input_path: "/roy_work/Object_detection_API/data/head_detect_data/PCI_head_data_DAv4/train.record"   # TODO
  }
  label_map_path: "/roy_work/Object_detection_API/data/head_detect_data/head_hat_label_map.pbtxt"    #TODO
  # 默认是 2000/1000，有可能造成CPU的OOM问题，所以可以减小
  queue_capacity: 200
  min_after_dequeue: 100
}

eval_config: {
  num_examples: 4500
  # Note: The below line limits the evaluation process to 10 evaluations.
  # Remove the below line to evaluate indefinitely.
  max_evals: 1
}

eval_input_reader: {
  tf_record_input_reader {
    input_path: "/roy_work/Object_detection_API/data/head_detect_data/PCI_head_data_DAv4/test.record"    #TODO
  }
  label_map_path: "/roy_work/Object_detection_API/data/head_detect_data/head_hat_label_map.pbtxt"
  shuffle: false
  num_readers: 1
}
